@Library('jenkinslibrary@master') _

def utils = new org.devops.utils()

pipeline{
    agent { 
        node { 
            label "built-in"   //指定运行此流水线的节点
        }              
    }
    // agent { 
    //     kubernetes {
    //         yaml '''
    //             apiVersion: "v1"
    //             kind: "Pod"
    //             metadata:
    //                 name: "jenkins-slave"
    //             spec:
    //                 containers:
    //                 image: "harbor.templete.com/devops/jenkins-slave-maven:jdk8-maven3.6.2"
    //                 name: "jnlp"
    //         '''
    //     }
    // }

    options{
        timestamps() //日志会有时间
        skipDefaultCheckout() //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1,unit: 'HOURS') //设置流水线超时时间
    }

    parameters {
        string(name:'DEPLOY_ENV',dafaultValue:'dev',description:'')
        // string(name:'DATA',dafaultValue:'20220426',description:'')
    }

    environment {
        STAGES_ON_OFF = "0"
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'git_http_url', value: '$.project.git_http_url']
            ],
            token: 'kubernetes-java-ci',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: true,
        )
    }
    
    //流水线的阶段
    stages{
        stage("Init"){
            steps{
                script{
                    currentBuild.description = "流水线执行开始"
                    utils.PrintMes("初始化","green")
                }
            }
        }
        //阶段1 获取代码
        stage("CheckOut"){
            when {
                environment name: 'ISINIT', value: "1"
            }
            steps{
                timeout(time: 5, unit:"MINUTES"){
                    script{
                        currentBuild.description = "\nCheckOut"
                        utils.PrintMes("获取代码","green")
                    }
                }
            }
        }
        //阶段2 构建
        stage("Build"){
            when {
                environment name: 'ISINIT', value: "1"
            }
            steps{
                timeout(time: 20, unit:"MINUTES"){
                    script{
                        currentBuild.description += "\nBuild"
                        utils.PrintMes("构建打包","green")
                    }
                }
            }
        }
        //阶段3 代码扫描
        stage("CodeScan"){
            when {
                environment name: 'ISINIT', value: "1"
            }
            steps{
                timeout(time: 30, unit:"MINUTES"){
                    script{
                        currentBuild.description += "\nCodeScan"
                        utils.PrintMes("代码扫描","green")
                    }
                }
            }
        }
        //阶段4 单元测试
        stage("UnitTest"){
            when {
                environment name: 'ISINIT', value: "1"
            }
            steps{
                timeout(time: 30, unit:"MINUTES"){
                    script{
                        currentBuild.description += "\nUnitTest"
                        utils.PrintMes("UnitTest","green")
                    }
                }
            }
        }
    }

    post {
        always{
            script{
                currentBuild.description += "\n流水线执行结束"
                utils.PrintMes("流水线不管是否成功都会调用","green")
            }
        }
        
        success{
            script{
                currentBuild.description += "\n流水线执行成功"
                utils.PrintMes("流水线执行成功","green")
            }
        
        }
        failure{
            script{
                currentBuild.description = "\n流水线执行失败"
                utils.PrintMes("流水线执行失败","green")
            }
        }
        
        aborted{
            script{
                currentBuild.description = "\n流水线执行取消"
                utils.PrintMes("流水线执行取消","green")
            }  
        }
    }
}