#!groovy

@Library('jenkinslibrary@master') _
// String Workspace = "/opt"
// def sonar = new org.devops.sonarqube()
def tools = new org.devops.utils()
def config = new ConfigSlurper()
        .parse(
                new File("org.devops.ci-Config.groovy")
                        .toURI()
                        .toURL()
        )


// String branchName = "${branchName}"

// def env1 = "${env}"
pipeline{
    
    agent { node { label "built-in"   //指定运行此流水线的节点
                    // customWorkspace "${Workspace}"  //指定运行工作目录（可选）
                    }}
    // tools {
    //     maven 'maven-3.8.5'
    // }
    
    options{
        timestamps() //日志会有时间
        skipDefaultCheckout() //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1,unit: 'HOURS') //设置流水线超时时间
    }
    
    //流水线的阶段
    stages{
        //阶段1 获取代码
        stage("CheckOut"){
            steps{
            
                timeout(time: 5, unit:"MINUTES"){
                    script{

                        // String branchName=branch

                        // print("${branchName}")
                        print("${config.imageRepository}")
                        //  tools.PrintMes("${branchName}","green")
                        // mvnHome = tool "maven-3.8.5"
                        // mvnJDK = tool "jdk-8.201"
                        // println(mvnHome)
                        // sh "${mvnHome}/bin/mvn -v"
                        
                        // println(mvnJDK)
                        // sh "mvn -v"
                        tools.PrintMes("获取代码","green")
                        // checkout([$class: 'GitSCM', 
                        //     branches: [[name: '*/main']], 
                        //     extensions: [],
                        //     userRemoteConfigs: 
                        //         [[credentialsId: 'root', 
                        //         url: 'http://gitlab-headless/root/back-end.git']]])
                    }
                }
            }
        }
        //阶段2 构建
        stage("Build"){
            steps{
                timeout(time: 20, unit:"MINUTES"){
                    script{
                        mvnHome = tool "maven-3.8.5"
                        // tools.PrintMes("构建打包","green")
                        // sh  """ 
                        //     ${mvnHome}/bin/mvn clean package -DskipTests"""


                    }
                }
            }
        }
        //阶段3 代码扫描
        stage("CodeScan"){
            steps{
                timeout(time: 30, unit:"MINUTES"){
                    script{
               
         
                        tools.PrintMes("代码扫描","green")
                        // def scannerHome = tool 'sonar-scanner'
                        // sonar.SonarScan("test","back-end",'first',"src","main",scannerHome)

                    }
                }
            }
        }
        //阶段4 单元测试
        stage("UnitTest"){
            steps{
                timeout(time: 30, unit:"MINUTES"){
                    script{
                        println("单元测试")
                    }
                }
            }
        }
    }
    post {
        always{
            script{
                println("流水线不管是否成功都会调用")
            }
        }
        
        success{
            script{
                // currentBuild.description = "流水线执行成功"
                // def gitServer = "http://gitlab-headless/api/v4"
                // def reqUrl = "projects/2/statuses/1a680d47077aa22f771058b41615bc668d4afb11?state=success"
                // withCredentials([string(credentialsId: 'gitlab-token', variable: 'gitlabtoken')]) { 
                // result = httpRequest customHeaders: [[maskValue: true, name: 'PRIVATE-TOKEN', value: "${gitlabtoken}"]], 
                //     httpMode: "POST", 
                //     contentType: "APPLICATION_JSON",
                //     consoleLogResponseBody: true,
                //     ignoreSslErrors: true, 
                //     requestBody: "",
                //     url: "${gitServer}/${reqUrl}"
                // // //quiet: true
                // // println("${gitlabtoken}")
                // }
                println("流水线执行成功")

            }
        
        }
        failure{
            script{
                currentBuild.description = "流水线执行失败"
                println("流水线执行失败")
            }
        }
        
        aborted{
            script{
                currentBuild.description = "流水线执行取消"
                println("流水线执行取消")
            }
        
        }
    }
}


//authorizationMatrix,
//buildDiscarder, 
//catchError, 
//checkoutToSubdirectory, 
//disableConcurrentBuilds, disableResume, 
//durabilityHint, 
//githubProjectProperty, 
//overrideIndexTriggers, 
//parallelsAlwaysFailFast, 
//preserveStashes, 
//quietPeriod, 
//rateLimitBuilds, 
//retry, 
//script, 
//skipDefaultCheckout, 
//skipStagesAfterUnstable, 
//timeout, 
//timestamps, 
//waitUntil, 
//warnError, 
//withChecks, 
//withContext, 
//withCredentials, 
//withEnv, 
//wrap, 
//ws